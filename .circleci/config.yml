version: 2.1

parameters:
  orb_version:
    type: string
    description: Deci ai ORB version https://circleci.com/developer/orbs/orb/deci-ai/circleci-common-orb
    default: "10.3.0"
#    default: "dev:alpha"

orbs:
  deci-common: deci-ai/circleci-common-orb@<< pipeline.parameters.orb_version >>
  aws-ecr: circleci/aws-ecr@8.2.1
  docker: circleci/docker@2.2.0

# This filter operates on SemVer2 tags only
release_tag_filter: &release_tag_filter
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^\d+\.\d+\.\d+$/

release_candidate_filter: &release_candidate_filter
  filters:
    branches:
      only: master

release_candidate_tag_filter: &release_candidate_tag_filter
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^\d+\.\d+\.\d+rc\d+/
    
    

jobs:
  build:
    parameters:
      py_version:
        type: string
        default: latest
      package_name:
        type: string
    docker:
      - image: cimg/python:<< parameters.py_version >>
    resource_class: large
    steps:
      - deci-common/checkout_and_skip_build:
          check_version_file: true
      - deci-common/get_persisted_version_info
      - when:
          condition:
            and:
              - not:
                  equal: [ develop, << pipeline.git.branch >> ]
              - not:
                  equal: [ staging, << pipeline.git.branch >> ]
              - not:
                  equal: [ master, << pipeline.git.branch >> ]
          steps:
            - run:
                name: install Black Flake8 python linter
                command: |
                  pip install --user -r requirements.dev.txt
            - run:
                name: Lint all python files changed since develop branch
                command: |
                  flake8 --statistics --config scripts/flake8-config setup.py $(git diff --diff-filter ACM origin/master --name-only | grep 'py$' | grep -v 'experimental/' | grep -v 'experimental_models/')
            - run:
                name: Run Black on changed files against master branch
                command: |
                  black --check setup.py $(git diff --diff-filter ACM origin/master --name-only | grep 'py$' | grep -v 'experimental/' | grep -v 'experimental_models/')
      - run:
          name: add requirements.txt and requirements.pro.txt to source code
          command: |
            cp requirements.txt src/super_gradients/requirements.txt
            cp requirements.pro.txt src/super_gradients/requirements.pro.txt
      - run:
          name: install python dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install pip==22.0.4
            cat requirements.txt | cut -f1 -d"#" | xargs -n 1 -L 1 pip install --progress-bar off
      - run:
          name: edit package version
          command: |
            echo "${NEW_VERSION}" > version.txt
            cat version.txt
      - run:
          name: setup custom environment variables
          command: |
            echo 'export PYTHONPATH=/home/circleci/super_gradients' >> $BASH_ENV
            echo 'export UPLOAD_LOGS=FALSE' >> $BASH_ENV
      - run:
          name: install package
          no_output_timeout: 30m
          command: |
            . venv/bin/activate
            python3 -m pip install --extra-index-url https://pypi.ngc.nvidia.com .[pro]
      - run:
          name: run tests with coverage
          no_output_timeout: 30m
          command: |
            . venv/bin/activate
            coverage run --source=super_gradients -m unittest tests/deci_core_unit_test_suite_runner.py
            coverage report
            coverage html  # open htmlcov/index.html in a browser
      - store_artifacts:
          path: htmlcov

      - store_artifacts:
          path: ~/sg_logs
  
  change_rc_to_b:
     description: "change rc in the tag to b"
     docker:
       - image: cimg/base:stable-20.04
     resource_class: small
     environment:
       BETA_TAG: 3.1.0rc13475
     steps:
       - run:
          name: change the rc to b
          command: BETA_TAG=$(echo ${CIRCLE_TAG} | sed -e  's|rc|b|'); echo ${BETA_TAG} > ~/BETA_TAG
       - run:
           name: push BETA_TAG variable to BASH_ENV 
           command: echo 'export BETA_TAG="${BETA_TAG}"' >> "$BASH_ENV"



  build_and_publish:
    description : "building the temp image and pushing to dev ecr"
    parameters:
       repo_name:
         type: string
         default: '307629990626.dkr.ecr.us-east-1.amazonaws.com/deci/super-gradients'
       version:
          type: string
    docker:
       - image: cimg/base:stable-20.04
    resource_class: small
    steps:
     - checkout
     - setup_remote_docker:
          version: 20.10.7
          docker_layer_caching: true
     - deci-common/container_image_build:
           dockerfile: scripts/Dockerfile
           repository_name: << parameters.repo_name >>
           image_tag: "${BETA_TAG}"
           build_args: 'VERSION=${CIRCLE_TAG}'
           extra_flags: ' --compress'
     - deci-common/push_docker_image_aws_dev:
           repository_name: << parameters.repo_name >>
           image_tag: "${BETA_TAG}"
           additional_tags: "latest"

  find_rc_tag_per_sha:
   description: this command will take the sha of the last commit and find the rc tag it belongs to as ${RC_TAG} variale
   docker:
       - image: cimg/aws:2022.11.1
   resource_class: small
   steps:
     - run:
          name: get rc tag of the final tag
          command: |
              RC_TAG=$(git tag --contains ${CIRCLE_SHA1} | grep -E '[[:digit:]]+\.[[:digit:]]+\.[[:digit:]]+rc[[:digit:]]+')
              echo "Found RC version: ${RC_TAG}"
     - run: 
         name: persist RC_TAG
         command: echo 'export RC_TAG="${RC_TAG}"' >> "$BASH_ENV"


  retag_docker_ecr:
   description: in the event of seccssesful test promote rc to final
   parameters:
     image_repo:
          type: string
          default: '307629990626.dkr.ecr.us-east-1.amazonaws.com/deci/super-gradients'
     new_image_tag:
        type: string
        default: ${CIRCLE_TAG}
     source_image_tag:
       type: string
   environment:
       NEW_IMAGE_TAG: << parameters.new_image_tag >>
       IMAGE_REPO: << parameters.image_repo >>
       SRC_IMAGE_TAG: << parameters.new_image_tag >>
   docker:
       - image: cimg/aws:2022.11.1
   resource_class: small
   steps:
     - run:
           name: retag docker
           command: |
              MANIFEST=$(aws ecr batch-get-image --repository-name << parameters.image_repo >> --image-ids imageTag=<< parameters.source_image_tag >> --query 'images[].imageManifest' --output text)
              aws ecr put-image --repository-name << parameters.image_repo >> --image-tag << parameters.new_image_tag >> --image-manifest "$MANIFEST"
              echo "                 ________________________________________________               "
              echo "                /                                                \              "
              echo "               |    _________________________________________     |             "
              echo "               |   |                                         |    |             "
              echo "               |   |   added tag: ${NEW_IMAGE_TAG}           |    |             "
              echo "               |   |   to image:                             |    |             "
              echo "               |   |   ${IMAGE_REPO}:${SRC_IMAGE_TAG}        |    |             "
              echo "               |   |                                         |    |             "
              echo "               |   |                                         |    |             "
              echo "               |   |                                         |    |             "
              echo "               |   |                                         |    |             "
              echo "               |   |                                         |    |             "
              echo "               |   |                                         |    |             "
              echo "               |   |                                         |    |             "
              echo "               |   |                                         |    |             "
              echo "               |   |                                         |    |             "
              echo "               |   |_________________________________________|    |             "
              echo "               |                                                  |             "
              echo "                \_________________________________________________/             "
              echo "                      \___________________________________/                     "
              echo "                    ___________________________________________                 "
              echo "                _-'    .-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-.  --- \`-_              "
              echo "              _-'.-.-. .---.-.-.-.-.-.-.-.-.-.-.-.-.-.-.--.  .-.-.\`-_          "
              echo "          _-'.-.-.-. .---.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-\`__\`. .-.-.-.\`-_      "
              echo "        _-'.-.-.-.-. .-----.-.-.-.-.-.-.-.-.-.-.-.-.-.-.-----. .-.-.-.-.\`-_    "
              echo "    _-'.-.-.-.-.-. .---.-. .-------------------------. .-.---. .---.-.-.-.\`-_  "
              echo "    :-------------------------------------------------------------------------: "
              echo "    \`---._.-------------------------------------------------------------._.---'"
               


  testing_supergradients_docker_image:
    description: "running integration test on the code"
    parameters:
        image_tag:
          type: string
        image_repo:
          type: string
          default: deciai/super-gradients
    #reserved for testing when will be done      
    #machine: true 
    #resource_class: deci-ai/research-standard
    docker:
      - image: cimg/base:stable-20.04
    steps:
        - deci-common/ecr_login_dev
        # - run:
        #    name: integration test
        #    #command: sudo docker run -it -e ENVIRONMENT_NAME=production -v ${PWD}:/SG -v /data:/data deciai/super-gradients:3.0.0 python3 ./tests/integration_tests/pretrained_models_test.py
        #    command: docker run --rm -it --shm-size=2gb --gpus all -v ${PWD}:/SG -v /data:/data << parameters.image_repo >>:<< parameters.image_tag >> python3 -c 'print("it works!")'
        -  run:
             command: echo Hello world


  release_candidate:
    parameters:
      py_version:
        type: string
    docker:
      - image: cimg/python:<< parameters.py_version >>
    steps:
      - deci-common/checkout_and_skip_build:
          check_version_file: true
      - deci-common/get_persisted_version_info
      - run:
          name: edit package version
          command: |
            echo $NEW_VERSION > version.txt
      - deci-common/pip_upload_package_codeartifact_dev:
          codeartifact_repository: "deci-packages"
      - deci-common/pip_test_package_installation_codeartifact_dev:
          package_name: "super-gradients"
          version: $NEW_VERSION
      - deci-common/git_config_automation_user
      - run:
          name: "commit version file"
          command: |
            git commit version.txt -m "Deci Services - Changed version to $NEW_VERSION"
      - deci-common/git_commit_and_tag:
          version: $NEW_VERSION

  release_version:
    parameters:
      py_version:
        type: string
    docker:
      - image: cimg/python:<< parameters.py_version >>
    steps:
      - deci-common/checkout_and_skip_build:
          check_version_file: true
      - run:
          name: verify __version__
          command: python3 tests/verify_version.py $CIRCLE_TAG
      - run:
          name: add requirements.txt and requirements.pro.txt to source code
          command: |
            cp requirements.txt src/super_gradients/requirements.txt
            cp requirements.pro.txt src/super_gradients/requirements.pro.txt
      - run:
          name: edit package version
          command: |
            echo $CIRCLE_TAG > version.txt

      - deci-common/pip_upload_package_codeartifact_all_accounts:
          codeartifact_repository: "deci-packages"

      - deci-common/pip_test_package_installation_codeartifact_dev:
          package_name: "super-gradients"
          version: $CIRCLE_TAG

      - deci-common/pip_test_package_installation_codeartifact_prod:
          package_name: "super-gradients"
          version: $CIRCLE_TAG

      - deci-common/pip_upload_package_codeartifact_prod:
          codeartifact_repository: "deci-toolkit"

      - deci-common/git_commit_and_tag:
          version: $CIRCLE_TAG
          delete_remote_tag_before_tagging: true

      - deci-common/tag_as:
          tag_name: "stable"
          delete_remote: true

      - deci-common/github_create_release:
          github_cli_token: $GITHUB_CLI_TOKEN
          directory_to_cd_into: "."
          tag: $CIRCLE_TAG
          notes: "This GitHub Release was done automatically by CircleCI"


  recipe_tests:
    machine: true
    resource_class: deci-ai/sg-gpu-on-premise
    parameters:
      sg_existing_env_path:
        type: string
        default: "/env/persistent_env"
      sg_new_env_name:
        type: string
        default: "${CIRCLE_BUILD_NUM}"
      sg_new_env_python_version:
        type: string
        default: "python3.8"
    steps:
      - checkout
      - run:
          name: install requirements and run recipe tests
          command: |
            << parameters.sg_new_env_python_version >> -m venv << parameters.sg_new_env_name >>
            source << parameters.sg_new_env_name >>/bin/activate
            python3.8 -m pip install --upgrade setuptools pip wheel
            python3.8 -m pip install -r requirements.txt
            python3.8 -m pip install git+https://github.com/Deci-AI/super-gradients.git@${CIRCLE_BRANCH}
            python3.8 -m pip install torch==1.12.0+cu116 torchvision==0.13.0+cu116 torchaudio==0.12.0 --extra-index-url https://download.pytorch.org/whl/cu116
            python3.8 src/super_gradients/examples/train_from_recipe_example/train_from_recipe.py --config-name=cifar10_resnet experiment_name=shortened_cifar10_resnet_accuracy_test training_hyperparams.max_epochs=100 training_hyperparams.average_best_models=False multi_gpu=DDP num_gpus=4
            python3.8 src/super_gradients/examples/convert_recipe_example/convert_recipe_example.py --config-name=cifar10_conversion_params experiment_name=shortened_cifar10_resnet_accuracy_test
            python3.8 src/super_gradients/examples/train_from_recipe_example/train_from_recipe.py --config-name=coco2017_yolox experiment_name=shortened_coco2017_yolox_n_map_test architecture=yolox_n training_hyperparams.loss=yolox_fast_loss training_hyperparams.max_epochs=10 training_hyperparams.average_best_models=False multi_gpu=DDP num_gpus=4
            python3.8 src/super_gradients/examples/train_from_recipe_example/train_from_recipe.py --config-name=cityscapes_regseg48 experiment_name=shortened_cityscapes_regseg48_iou_test training_hyperparams.max_epochs=10 training_hyperparams.average_best_models=False multi_gpu=DDP num_gpus=4
            coverage run --source=super_gradients -m unittest tests/deci_core_recipe_test_suite_runner.py

      - run:
          name: Remove new environment when failed
          command: "rm -r << parameters.sg_new_env_name >>"
          when: on_fail



workflows:
  release:
    jobs:
      - deci-common/persist_version_info:
          <<: *release_tag_filter
      - deci-common/codeartifact_login:
          name: "login_to_codeartifact_release"
          repo_name: "deci-packages"
          <<: *release_tag_filter
      - build:
          name: "build3.7"
          py_version: "3.7"
          package_name: "super-gradients"
          requires:
            - deci-common/persist_version_info
            - login_to_codeartifact_release
          <<: *release_tag_filter
      - recipe_tests:
          <<: *release_tag_filter
      - release_version:
          py_version: "3.7"
          requires:
            - "build3.7"
            - recipe_tests
          <<: *release_tag_filter
      - deci-common/pip_upload_package_from_codeartifact_to_global_pypi:
          package_name: "super-gradients"
          name: "upload_super_gradients_to_pypi"
          version: $CIRCLE_TAG
          requires:
            - "release_version"
          context:
            - pypi-public
          <<: *release_tag_filter
      

  build_and_deploy:
    jobs:
      - deci-common/persist_version_info
      - deci-common/codeartifact_login:
          repo_name: "deci-packages"

      - build:
          name: "build3.7"
          py_version: "3.7"
          package_name: "super-gradients"
          requires:
            - deci-common/persist_version_info
            - deci-common/codeartifact_login

      - release_candidate: # happens on merge
          py_version: "3.7"
          requires:
            - "build3.7"
          <<: *release_candidate_filter

  SG_docker:
     jobs:
       - change_rc_to_b # works on release candidate creation
           #<<: *release_candidate_tag_filter 
       - build_and_publish:  # works on release candidate creation
           version: ${BETA_TAG}
           requires:
             - "change_rc_to_b"
           #<<: *release_candidate_tag_filter 
       - testing_supergradients_docker_image:  # works on release candidate creation
          image_repo: '307629990626.dkr.ecr.us-east-1.amazonaws.com/deci/super-gradients'
          image_tag: ${BETA_TAG}
          requires:
            - "build_and_publish"
          #<<: *release_candidate_tag_filter
       - retag_docker_ecr: # works on release candidate creation for ECR Repo
          name: change_beta_to_rc
          source_image_tag: ${BETA_TAG}
          #new_image_tag: ${CIRCLE_TAG}
          new_image_tag: 3.1.0rc13475
          requires:
            - "testing_supergradients_docker_image"
          #<<: *release_candidate_tag_filter
       - find_rc_tag_per_sha: # works on release
           <<: *release_tag_filter
       - retag_docker_ecr: # works on release
            name: add release tag to rc tag
            source_image_tag: ${RC_TAG}
            new_image_tag: ${CIRCLE_TAG}
            <<: *release_tag_filter 
       - hold-sg-public-release:  # works on release
           type: approval
           <<: *release_tag_filter
       - docker/publish:  # works on release
          image: deciai/super-gradients
          remote-docker-version: 20.10.12
          update-description: true
          use-buildkit: true
          use-remote-docker: true
          use-docker-credentials-store: true
          tag: latest,${CIRCLE_TAG}
          extra_build_args: '--build-arg VERSION=${CIRCLE_TAG} --compress' #building from scratch as it faster and cheaper than download and retag
          requires:
            - "hold-sg-public-release"
          <<: *release_tag_filter
       - docker/publish: # works on release
          image: deciai/super-gradients
          remote-docker-version: 20.10.12
          update-description: true
          use-buildkit: true
          use-remote-docker: true
          use-docker-credentials-store: true
          tag: ${CIRCLE_TAG}-runtime
          extra_build_args: '--build-arg VERSION=${CIRCLE_TAG} --build-arg DOCKER_IMAGE_TAG=11.3.1-runtime-ubuntu20.04  --compress'
          requires:
            - "hold-sg-public-release"
          <<: *release_tag_filter

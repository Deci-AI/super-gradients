version: 2.1

parameters:
  orb_version:
    type: string
    description: Deci ai ORB version https://circleci.com/developer/orbs/orb/deci-ai/circleci-common-orb
#    default: "2.2.0"
    default: "dev:alpha"

orbs:
  deci-common: deci-ai/circleci-common-orb@<< pipeline.parameters.orb_version >>

# This filter operates on SemVer2 tags only
release_tag_filter: &release_tag_filter
  filters:
    branches:
      ignore: /.*/
    tags:
      only: /^\d+\.\d+\.\d+$/

release_candidate_filter: &release_candidate_filter
  filters:
    branches:
      only: master


jobs:

  build:
    parameters:
      py_version:
        type: string
        default: latest
      package_name:
        type: string
    docker:
      - image: cimg/python:<< parameters.py_version >>
    resource_class: large
    steps:
      - deci-common/checkout_and_skip_build:
          check_version_file: true
      - deci-common/get_persisted_version_info
      - run:
          name: install python dependencies
          command: |
            python3 -m venv venv
            . venv/bin/activate
            python3 -m pip install --upgrade pip
            cat requirements.txt | cut -f1 -d"#" | xargs -n 1 -L 1 pip install --progress-bar off
      - run:
          name: edit package version
          command: |
            echo "${NEW_VERSION}" > version.txt
            cat version.txt
      - run:
          name: setup custom environment variables
          command: |
            echo 'export PYTHONPATH=/home/circleci/super_gradients' >> $BASH_ENV
      - run:
          name: install package
          no_output_timeout: 30m
          command: |
            . venv/bin/activate
            python3 -m pip install .
      - run:
          name: run tests with coverage
          no_output_timeout: 30m
          command: |
            . venv/bin/activate
            coverage run --source=super_gradients -m unittest tests/deci_core_unit_test_suite_runner.py
            coverage report
            coverage html  # open htmlcov/index.html in a browser

      - store_artifacts:
          path: htmlcov

      - store_artifacts:
          path: ~/sg_logs


  release_candidate:
    parameters:
      py_version:
        type: string
    docker:
      - image: cimg/python:<< parameters.py_version >>
    steps:
      - deci-common/checkout_and_skip_build:
          check_version_file: true
      - deci-common/get_persisted_version_info
      - run:
          name: edit package version
          command: |
            echo $NEW_VERSION > version.txt
      - deci-common/pip_upload_package_codeartifact_dev:
          codeartifact_repository: "deci-packages"
      - deci-common/pip_test_package_installation_codeartifact_dev:
          package_name: "super-gradients"
          version: $NEW_VERSION
      - run:
          name: "commit version file"
          command: | 
            git commit version.txt -m "Deci Services - Changed version to $NEW_VERSION"
      - deci-common/git_commit_and_tag:
          version: $NEW_VERSION

  release_version:
    parameters:
      py_version:
        type: string
    docker:
      - image: cimg/python:<< parameters.py_version >>
    steps:
      - deci-common/checkout_and_skip_build:
          check_version_file: true

      - run:
          name: edit package version
          command: |
            echo $CIRCLE_TAG > version.txt

      - deci-common/pip_upload_package_codeartifact_all_acoounts:
          codeartifact_repository: "deci-packages"

      - deci-common/pip_test_package_installation_codeartifact_dev:
          package_name: "super-gradients"
          version: $CIRCLE_TAG

      - deci-common/pip_test_package_installation_codeartifact_prod:
          package_name: "super-gradients"
          version: $CIRCLE_TAG

      - deci-common/pip_upload_package_codeartifact_prod:
          codeartifact_repository: "deci-toolkit"

      - deci-common/git_commit_and_tag:
          version: $CIRCLE_TAG
          delete_remote_tag_before_tagging: true

      - deci-common/tag_as:
          tag_name: "stable"
          delete_remote: true

      - deci-common/github_create_release:
          directory_to_cd_into: "."
          tag: $CIRCLE_TAG
          notes: "This GitHub Release was done automatically by CircleCI"

  upload_to_pypi:
    docker:
      - image: cimg/python:3.7.8
    parameters:
      package_name:
        type: string
      sleep:
        type: string
        default: "0"
    steps:
      - deci-common/checkout_and_skip_build:
          check_version_file: true
      - run:
          command: |
            sudo apt-get update
            pip install --user awscli twine
            sleep << parameters.sleep >>
      - run_on_aws_account:
          aws_role: $AWS_PROD_ROLE
          command: |
            export LATEST_VERSION_ON_AWS="$(aws codeartifact list-package-versions  --domain deci-packages --repository \
                    deci-packages --package << parameters.package_name >> --domain-owner ${AWS_PROD_ACCOUNT_ID} \
                      --query versions[0].version --sort-by  PUBLISHED_TIME  --format pypi --output text)"
            echo "Will attempt to upload $LATEST_VERSION_ON_AWS to pypi"

            assets=$(aws codeartifact list-package-version-assets  --domain deci-packages --repository deci-packages \
                      --package << parameters.package_name >>  --format pypi --package-version $LATEST_VERSION_ON_AWS \
                  --domain-owner ${AWS_PROD_ACCOUNT_ID} --query assets[*].name --output text)
            echo "assets: $assets "
            for ass in $assets;
            do
              echo "working on $ass"
              aws codeartifact get-package-version-asset --repository deci-packages --domain deci-packages --domain-owner  ${AWS_PROD_ACCOUNT_ID} --package << parameters.package_name >> --package-version $LATEST_VERSION_ON_AWS --format pypi --asset "${ass}" "${ass}"
            done

            for ass in $assets
            do
                echo "***  \n regular upload of $ass  \n ***"
                python -m twine upload --repository-url "https://upload.pypi.org/legacy/" -u __token__ -p ${PYPI_TOKEN} "${ass}"
            done

            # it's funny because it's gas



workflows:
  release:
    jobs:
      - deci-common/codeartifact_login:
          name: "login_to_codeartifact_release"
          repo_name: "deci-packages"
          <<: *release_tag_filter
      - build:
          name: "build3.7"
          py_version: "3.7"
          package_name: "super-gradients"
          requires:
            - login_to_codeartifact_release
          <<: *release_tag_filter
      - release_version:
          py_version: "3.7"
          requires:
            - "build3.7"
          <<: *release_tag_filter
      - upload_to_pypi:
          package_name: "super-gradients"
          name: upload_super_gradients_to_pypi
          sleep: "60"
          requires:
            - "release_version"
          context:
            - pypi-public
          <<: *release_tag_filter

  build_and_deploy:
    jobs:
      - deci-common/persist_version_info:
          branch: << pipeline.git.branch >>
      - deci-common/codeartifact_login:
          repo_name: "deci-packages"
      - build:
          name: "build3.7"
          py_version: "3.7"
          package_name: "super-gradients"
          requires:
            - deci-common/persist_version_info
            - deci-common/codeartifact_login
      - release_candidate: # happens on merge
          py_version: "3.7"
          requires:
            - "build3.7"
          <<: *release_candidate_filter


# The purpose of the example below is to demonstrate the use of registry for external objects for training.
# - We train mobilenet_v2 on a user dataset which is not defined in ALL_DATASETS using the dataloader registry.
# - We leverage predefined configs from cifar_10 training recipe in our repo.
#
# In order for the registry to work, we must trigger the registry of the user's objects by importing their module at
#   the top of the training script. Hence, we created a similar script to our classic train_from_recipe but with the imports
#   on top. Once imported, all the registry decorated objects will be resolved (i.e user_mnist_train will be resolved
#   to the dataloader of our user's)
#
# Differently from user_recipe_mnist_example, here we demonstrate how to use train_from_recipe, without the need to implement a DataLoader class for registry.
# Instead- we work straight with the user defined datasets, which is the simpler option when one does not need their own DataLoader implementation.
# We do so by Dropping the train_datalaoder, valid_dataloader fields from the recipe's config, while specifying the dataset arg in
#   train_dataloader_params, valid_dataloader_params.

defaults:
  - training_hyperparams: coco2017_yolox_train_params
  - dataset_params: coco_detection_dataset_params
  - checkpoint_params: default_checkpoint_params
  - _self_
  - variable_setup

arch_params:
  num_classes: 11

checkpoint_params:
  load_checkpoint: True
  pretrained_weights: coco

# num_classes of checkpoint_path/ pretrained_weights, when checkpoint_path is not None.
# Used when num_classes != checkpoint_num_class.
# In this case, the module will be initialized with checkpoint_num_class, then weights will be loaded.
# Finally model.replace_head(new_num_classes=num_classes) is called to replace the head with new_num_classes.
checkpoint_num_classes: # number of classes in the checkpoint

dataset_params:
  train_dataset_params:
    data_dir: /mnt/ml-team/homes/marianna.parzych/Unstructured/DocLayNet # Where the data is stored.
    images_dir: PNG # Local path to directory that includes all the images. Path relative to `data_dir`. Can be the same as `labels_dir`.
    json_file: COCO/train.json # Local path to json annotation file todo train.json
    all_classes_list: [ Caption, Footnote, Formula, List-item, Page-footer, Page-header, Picture, Section-header, Table, Text, Title,] # List of classes used in your dataset.
    input_dim: [1025, 1025]
    transforms:
      - DetectionPaddedRescale:
          input_dim: [1024, 1024] # Change for different training resolutions (multiplications of 32)
      - DetectionTargetsFormatTransform:
          input_dim: [1024, 1024] 
          output_format: LABEL_CXCYWH

  train_dataloader_params:
    dataset: DocLayNetDetectionDataset
    batch_size: 4
    num_workers: 4

  val_dataset_params:
    data_dir: /mnt/ml-team/homes/marianna.parzych/Unstructured/DocLayNet
    images_dir: PNG
    json_file: COCO/val.json
    transforms:
      - DetectionPaddedRescale:
          input_dim: [1024, 1024] 
      - DetectionTargetsFormatTransform:
          input_dim: [1024, 1024] 
          output_format: LABEL_CXCYWH

  val_dataloader_params:
    dataset: DocLayNetDetectionDataset
    batch_size: 4
    num_workers: 4

resume: False
training_hyperparams:
  resume: ${resume}
  max_epochs: 3
  criterion_params:
    num_classes: ${arch_params.num_classes}

architecture: yolox_l

experiment_name: test_user_recipe_doclaynet_yolox

#  DDRNet-39 training example with COCO dataset.
#
#
#  Instructions:
#   python -m super_gradients.train_from_recipe --config-name=coco2017_pose_ddrnet39
#
#

defaults:
  - training_hyperparams: coco2017_dekr_pose_train_params
  - dataset_params: coco_pose_estimation_dekr_dataset_params
  - arch_params: pose_ddrnet39_arch_params
  - checkpoint_params: default_checkpoint_params
  - _self_
  - variable_setup

resume: False

architecture: pose_ddrnet39

multi_gpu: DDP
num_gpus: 8

experiment_suffix: ""
experiment_name: coco2017_${architecture}${experiment_suffix}



train_dataloader: coco2017_pose_train
val_dataloader: coco2017_pose_val

arch_params:
  num_classes: ${dataset_params.num_joints}


dataset_params:
  train_dataloader_params:
    batch_size: 8

  val_dataloader_params:
    batch_size: 16

training_hyperparams:
  resume: ${resume}

  sg_logger: "wandb_sg_logger"
  sg_logger_params:
    project_name: PoseEstimation
    entity: super-gradients
    api_server: "https://wandb.research.deci.ai"
    save_checkpoints_remote: True
    save_tensorboard_remote: True
    save_logs_remote: True

  loss: dekr_loss

  criterion_params:
    heatmap_loss: qfl
    heatmap_loss_factor: 1.0
    offset_loss_factor: 0.03

  valid_metrics_list:
    - PoseEstimationMetrics:
        num_joints: ${dataset_params.num_joints}
        oks_sigmas: ${dataset_params.oks_sigmas}
        max_objects_per_image: 20
        post_prediction_callback:
          _target_: super_gradients.training.utils.pose_estimation.DEKRPoseEstimationDecodeCallback
          max_num_people: 20
          keypoint_threshold: 0.05
          nms_threshold: 0.05
          nms_num_threshold: 8
          output_stride: 4
          apply_sigmoid: True

  phase_callbacks: []
#   Note: You can uncomment following block to enable visualization of intermediate results during training.
#   When enabled, these callbacks will save first batch from training & validation to Tensorboard.
#   This is helpful for debugging and doing visual checks whether predictions are reasonable and transforms are
#   working as expected.
#   The only downside is that it tend to bloat Tensorboard logs (Up to ten Gigs for long training regimes).
#  phase_callbacks:
#    - DEKRVisualizationCallback:
#        phase:
#          _target_: super_gradients.training.utils.callbacks.callbacks.Phase
#          value: TRAIN_BATCH_END
#        prefix: "train_"
#        mean: [ 0.485, 0.456, 0.406 ]
#        std: [ 0.229, 0.224, 0.225 ]
#        apply_sigmoid: False
#
#    - DEKRVisualizationCallback:
#        phase:
#          _target_: super_gradients.training.utils.callbacks.callbacks.Phase
#          value: VALIDATION_BATCH_END
#        prefix: "val_"
#        mean: [ 0.485, 0.456, 0.406 ]
#        std: [ 0.229, 0.224, 0.225 ]
#        apply_sigmoid: False

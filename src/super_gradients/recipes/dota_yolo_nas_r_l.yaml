# YoloNAS-S Detection training on COCO2017 Dataset:
# This training recipe is for demonstration purposes only. Pretrained models were trained using a different recipe.
# So it will not be possible to reproduce the results of the pretrained models using this recipe.

# Instructions:
#   0. Make sure that the data is stored in dataset_params.dataset_dir or add "dataset_params.data_dir=<PATH-TO-DATASET>" at the end of the command below (feel free to check ReadMe)
#   1. Move to the project root (where you will find the ReadMe and src folder)
#   2. Run the command you want:
#         yolo_nas_s: python src/super_gradients/examples/train_from_recipe_example/train_from_recipe.py --config-name=coco2017_yolo_nas_s
#

defaults:
  - training_hyperparams: default_yolo_nas_r_train_params
  - dataset_params: dota2_yolo_nas_r_dataset_params
  - arch_params: yolo_nas_r_l_arch_params
  - checkpoint_params: default_checkpoint_params
  - _self_
  - variable_setup

dataset_params:
  train_dataloader_params:
    batch_size: 16

  val_dataloader_params:
    batch_size: 8

arch_params:
  num_classes: ${dataset_params.num_classes}

architecture: yolo_nas_r_l

multi_gpu: DDP
num_gpus: 8

experiment_suffix: ""
experiment_name: dota2_${architecture}${experiment_suffix}

checkpoint_params:
  # For training Yolo-NAS-R we use pretrained weights for Yolo-NAS-S object detection model.
  # By setting strict_load: key_matching we load only those weights that match the keys of the model.
  checkpoint_path: https://sghub.deci.ai/models/yolo_nas_l_coco.pth
  strict_load:
    _target_: super_gradients.training.sg_trainer.StrictLoad
    value: key_matching

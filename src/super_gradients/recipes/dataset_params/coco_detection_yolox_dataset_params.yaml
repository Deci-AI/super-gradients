data_dir: /data/coco # root path to coco data
train_subdir: images/train2017 # sub directory path of data_dir containing the train data.
val_subdir: images/val2017 # sub directory path of data_dir containing the validation data.
train_json_file: instances_train2017.json # path to coco train json file, data_dir/annotations/train_json_file.
val_json_file: instances_val2017.json # path to coco validation json file, data_dir/annotations/val_json_file.

cache_dir: # path to a directory that will be used for caching (with numpy.memmap).
cache_train_images: False
cache_val_images: False

batch_size: 16 # batch size for trainset
val_batch_size: 64 # batch size for valset
train_input_dim: [640, 640]
val_input_dim: [640, 640]

targets_format:
  _target_: super_gradients.training.utils.detection_utils.DetectionTargetsFormat # targets format
  value: LABEL_CXCYWH

tight_box_rotation: False
train_transforms:
  - _target_: super_gradients.training.transforms.transforms.DetectionMosaic
    input_dim: ${dataset_params.train_input_dim}
    prob: 1.
  - _target_: super_gradients.training.transforms.transforms.DetectionRandomAffine
    degrees: 10.                  # rotation degrees, randomly sampled from [-degrees, degrees]
    translate: 0.1                # image translation fraction
    scales: [0.1, 2]              # random rescale range (keeps size by padding/cropping) after mosaic transform.
    shear: 2.0                    # shear degrees, randomly sampled from [-degrees, degrees]
    target_size: ${dataset_params.train_input_dim}
    filter_box_candidates: False  # whether to filter out transformed bboxes by edge size, area ratio, and aspect ratio.
    wh_thr: 2                     # edge size threshold when filter_box_candidates = True (pixels)
    area_thr: 0.1                 # threshold for area ratio between original image and the transformed one, when when filter_box_candidates = True
    ar_thr: 20                    # aspect ratio threshold when filter_box_candidates = True
  - _target_: super_gradients.training.transforms.transforms.DetectionMixup
    input_dim: ${dataset_params.train_input_dim}
    mixup_scale: [0.5, 1.5]         # random rescale range for the additional sample in mixup
    prob: 1.0                       # probability to apply per-sample mixup
    flip_prob: 0.5                  # probability to apply horizontal flip
  - _target_: super_gradients.training.transforms.transforms.DetectionHSV
    prob: 1.0                       # probability to apply HSV transform
    hgain: 5                        # HSV transform hue gain (randomly sampled from [-hgain, hgain])
    sgain: 30                       # HSV transform saturation gain (randomly sampled from [-sgain, sgain])
    vgain: 30                       # HSV transform value gain (randomly sampled from [-vgain, vgain])
  - _target_: super_gradients.training.transforms.transforms.DetectionHorizontalFlip
    prob: 0.5                       # probability to apply horizontal flip
  - _target_: super_gradients.training.transforms.transforms.DetectionPaddedRescale
    input_dim: ${dataset_params.train_input_dim}
    max_targets: 120
  - _target_: super_gradients.training.transforms.transforms.DetectionTargetsFormatTransform
    output_format: ${dataset_params.targets_format}

val_transforms:
  - _target_: super_gradients.training.transforms.transforms.DetectionPaddedRescale
    input_dim: ${dataset_params.val_input_dim}
  - _target_: super_gradients.training.transforms.transforms.DetectionTargetsFormatTransform
    max_targets: 50
    output_format: ${dataset_params.targets_format}

val_collate_fn: # collate function for valset
  _target_: super_gradients.training.utils.detection_utils.DetectionCollateFN
train_collate_fn: # collate function for trainset
  _target_: super_gradients.training.utils.detection_utils.DetectionCollateFN

class_inclusion_list: # If not None,every class not included will be ignored.
train_max_num_samples: # If not None, only specified number of samples will be loaded in train dataset
val_max_num_samples:   # If not None, only specified number of samples will be loaded in test dataset
with_crowd: False     # Whether to return "crowd" labels in validation

_convert_: all